import { BaseGulpTask } from '../BaseGulpTask';
import * as gulp from 'gulp';
import { BuildConfig } from '../../config/build';
import { Utils } from '../utils';
import * as yargs from 'yargs';
let $: any = require('gulp-load-plugins')({ lazy: true });
let Glob: any = require('glob').Glob;

/**
 * Vets the code style & quality of all library related JavaScript as the gulp task 'vet-lib-js'.
 *
 * @class
 */
export class GulpTask extends BaseGulpTask {

  /**
   * @property  {string}  description   - Help description for the task.
   */
  public static description: string = 'Run code quality & style analysis on all library JavaScript (some demo source code)';

  /**
   * @property  {Object}  options   - Any command line flags that can be passed to the task.
   */
  public static options: any = {
    'noExit': 'Flag if failed vetting should not emit error this terminating the process',
    'verbose': 'Output all JavaScript files being vetted'
  };

  /**
   * @property  {ICommandLineArgs}  args  - Command line arguments;
   */
  private _args: ICommandLineArgs = yargs.argv;

  /** @constructor */
  constructor(done: IVoidCallback) {
    super();
    Utils.log('Vetting library JavaScript code');

    // get all JS in the library except files that are explicitly excluded
    let allJavaScript: string[] = BuildConfig.LIB_JS.concat(BuildConfig.LIB_EXCLUDE_LINT_JS);

    // find all JS files generated by TypeScript & exclude them from vetting
    let pattern: string = 'src/*(core|components)/**/*.ts';
    let g: any = new Glob(pattern, (error: Error, matches: string[]) => {
      matches.forEach((match: string) => {
        let jsFile: string = match.replace('.ts', '.js');
        allJavaScript.push('!' + jsFile);
      });

      // vet all non-generated JS files
      return gulp.src(allJavaScript)
        .pipe($.if(this._args.verbose, $.print()))
        .pipe($.eslint())
        .pipe($.eslint.format())
        .pipe($.eslint.failAfterError());
    });
  }

}
